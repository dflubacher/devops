# =============================================================================
# Provisioning script for Ubuntu 20.04 on qemu (emulating Lat7490)
# Tested for 20.04.3
# v0.1.0, 2022-01-05
# To run it on localhost:
#   1. Install poetry (using shell script run at first login)
#   2. Download/copy repo to machine.
#   3. `poetry update` (to install Ansible).
#   4. poetry run ansible-playbook -i hosts.ini --ask-become-pass playbook.yaml
# -----------------------------------------------------------------------------

---
- hosts: lat7490
  connection: local
  become_user: root

  vars:
    # https://docs.ansible.com/ansible/latest/inventory/implicit_localhost.html
    # If this is not set, Ansible might use /usr/bin/python and then might not
    # find certain libraries (ModuleNotFoundError), as described here:
    # https://stackoverflow.com/a/51973504
    ansible_python_interpreter: "{{ ansible_playbook_python }}"
    # Define own variables.
    user: "{{ ansible_env.USER }}"
    home_dir: "{{ ansible_env.HOME }}"

  pre_tasks:
    - name: Update apt cache if needed
      become: true
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 3600

  tasks:
    - name: Set to generate locales
      become: true
      ansible.builtin.debconf:
        name: locales
        question: locales/locales_to_be_generated
        value: en_US.UTF-8 UTF-8, de_CH.UTF-8 UTF-8
        vtype: multiselect

    # https://github.com/microsoft/vscode-dev-containers/blob/6e97392e224a3bcf392f3b5b1cd171697e4b4764/containers/rust/.devcontainer/library-scripts/rust-debian.sh#L124
    - name: Install packages
      become: true
      apt:
        pkg:
          - build-essential
          - chrony
          - curl
          - ca-certificates
          - gnupg2
          - lldb
          - gcc
          - libc6-dev
          - git
          - gitk
          - meld
          - tlp
          - tlp-rdw
          - pm-utils
          - zsh
          - htop
          - ufw
          - gparted
          - tmux
          - vlc
          - keepass2
          - yubikey-luks
        state: latest
        update_cache: yes

    ##### Disable Bluetooth on startup, manually switch it on per need.
    - name: Configure tlp bluetooth settings
      become: true
      lineinfile:
        dest: /etc/tlp.conf
        regexp: "^DEVICES_TO_DISABLE_ON_STARTUP=(.*)"
        line: 'DEVICES_TO_DISABLE_ON_STARTUP="bluetooth wwan"'
        state: present

    - name: Start tlp
      become: true
      service:
        name: tlp
        state: started
        enabled: yes

    - name: Ensure chrony is running
      become: true
      service:
        name: chronyd
        state: started
        enabled: yes

    ##### Remove swap.img.
    - name: Remove swap file from /etc/fstab as we're using a swap partition
      become: true
      ansible.posix.mount:
        path: /swap.img
        fstype: swap
        state: absent

    - name: Disable swap
      become: true
      command: 
        cmd: swapoff /swap.img
      tags: swap, non-idempotent


    ##### Unattended updates. To check if that alone works or if additional
    # files in /etc/apt/apt.conf.d/ have to be modified.
    - name: Install unattended-upgrades
      become: true
      apt:
        pkg:
          - unattended-upgrades
        state: latest
        update_cache: yes

    # https://askubuntu.com/a/1323117
    - name: Configure debconf settings
      become: true
      ansible.builtin.debconf:
        name: unattended-upgrades
        question: unattended-upgrades/enable_auto_updates
        value: "true"
        vtype: boolean

    - name: dpkg-reconfigure -f noninteractive unattended-upgrades
      become: true
      command:
        cmd: dpkg-reconfigure -f noninteractive unattended-upgrades
        creates: /etc/apt/apt.conf.d/20auto-upgrades

    ##### KVM/QEMU/libvirt/Vagrant.
    # https://help.ubuntu.com/community/KVM/Installation
    # Added qemu-efi and OVMF to have UEFI support, virt-manager to have a GUI,
    # and libvirt-dev as it was required for the vagrant plugin to get
    # installed. Added cloud-image-utils for merging cloud-init configuration
    # files.
    - name: Install KVM for Ubuntu
      become: true
      apt:
        pkg:
          - qemu-kvm
          - libvirt-daemon-system
          - libvirt-clients
          - libvirt-dev
          - bridge-utils
          - qemu-efi
          - ovmf
          - virt-manager
          - cloud-image-utils
          - xorriso
        state: latest
        install_recommends: no

    - name: Ensure group "libvirt" exists
      become: true
      ansible.builtin.group:
        name: libvirt
        state: present

    - name: Add user to "libvirt" group
      become: true
      ansible.builtin.user:
        user: "{{ user }}"
        groups: libvirt
        append: yes

    # https://www.vagrantup.com/downloads
    - name: Install Vagrant apt repository and signing key (add apt signing key to keyring file)
      become: true
      ansible.builtin.apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        keyring: /etc/apt/trusted.gpg.d/releases.hashicorp.gpg

    - name: Enable auto-updating using the system's package manager
      become: true
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/releases.hashicorp.gpg] https://apt.releases.hashicorp.com focal main
        state: present
        filename: vagrant

    - name: Install Vagrant
      become: true
      apt:
        pkg:
          - vagrant
        state: latest
        update_cache: yes

    - name: Install Vagrant plugin for libvirt
      command: 
        cmd: "vagrant plugin install vagrant-libvirt"
      tags: vagrant, non-idempotent

    ##### Google Chrome.
    # TODO: somehow there still ends up an apt-repository without `signed-by`
    #       in google-chrome.list.
    - name: Install Chrome apt repository and signing key (add apt signing key to keyring file)
      become: true
      ansible.builtin.apt_key:
        url: https://dl-ssl.google.com/linux/linux_signing_key.pub
        keyring: /etc/apt/trusted.gpg.d/google-chrome.gpg

    - name: Enable auto-updating Chrome using the system's package manager
      become: true
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main
        state: present
        filename: google-chrome

    - name: Install Google Chrome
      become: true
      apt:
        pkg:
          - google-chrome-stable
        state: latest
        update_cache: yes

    ##### VS code.
    - name: Install vscode apt repository and signing key (add apt signing key to keyring file)
      become: true
      ansible.builtin.apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        keyring: /etc/apt/trusted.gpg.d/packages.microsoft.gpg

    - name: Enable auto-updating using the system's package manager.
      become: true
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main
        state: present
        filename: vscode

    - name: Install VS code
      become: true
      apt:
        pkg:
          - apt-transport-https
          - code
        state: latest
        update_cache: yes

    # VS code recommends to install extensions per user.
    - name: Install VS code extensions
      command: 
        cmd: "code --install-extension {{ item }}"
      loop:
        - "ms-vscode.cpptools"
        - "ms-python.python"
        - "ms-python.vscode-pylance"
        - "ms-vscode-remote.vscode-remote-extensionpack"
        - "ms-kubernetes-tools.vscode-kubernetes-tools"
        - "ms-azuretools.vscode-docker"
        - "redhat.ansible"
        - "eamodio.gitlens"

    ##### docker.
    # Not idempotent.
    - name: Download docker installer
      become: true
      get_url:
        url: https://get.docker.com
        dest: /tmp/docker-installer
        mode: "0755"
      tags: non-idempotent

    - name: Execute the docker installer
      become: true
      command: 
        cmd: /tmp/docker-installer
      tags: docker, non-idempotent

    - name: Add current user to Docker group
      become: true
      ansible.builtin.user:
        name: "{{ user }}"
        groups: docker
        append: yes
      tags: docker, non-idempotent

    - name: enable Docker daemon
      become: true
      service:
        name: docker
        state: started
      tags: docker, non-idempotent
    # end: docker.

    ##### History autocomplete.
    # src: https://unix.stackexchange.com/a/20830
    - name: Enable autocomplete using bash history
      blockinfile:
        path: "{{ home_dir }}/.inputrc"
        create: yes
        marker_begin: "Autocomplete: Key bindings, up/down arrow searches through history."
        marker_end: "end: Autocomplete"
        block: |
          "\e[A": history-search-backward
          "\e[B": history-search-forward
          "\eOA": history-search-backward
          "\eOB": history-search-forward
    # end: History autocomplete.
    #
    ##### Inkscape.
    # Installing the latest inkscape version using their ppa.
    # https://wiki.inkscape.org/wiki/Installing_Inkscape#Ubuntu_Linux_New_Stable_Versions
    - name: Add stable Inkscape ppa
      become: true
      ansible.builtin.apt_repository:
        repo: ppa:inkscape.dev/stable
        update_cache: yes

    - name: Install Inkscape
      become: true
      apt:
        pkg:
          - inkscape
        state: latest
    # end: Inkscape.

    ##### Gimp.
    - name: Add stable Gimp ppa
      become: true
      ansible.builtin.apt_repository:
        repo: ppa:ubuntuhandbook1/gimp
        update_cache: yes

    - name: Install Gimp
      become: true
      apt:
        pkg:
          - gimp
          - gimp-gmic
        state: latest
    # end: Gimp.

    ##### Enable firewall.
    - name: Enable ufw
      become: true
      community.general.ufw:
        state: enabled

    ##### Git configuration.
    # Without become_user, the config is placed in /root/.gitconfig. This
    # requires sudo.
    - name: Set ui color to true
      community.general.git_config:
        name: color.ui
        value: true
        scope: global

    # git alias up.
    # https://stackoverflow.com/a/15316602
    - name: Add git alias 'up'
      community.general.git_config:
        name: alias.up
        value: "!git remote update -p; git merge --ff-only @{u}"
        scope: global

    # Use `git up`, but safeguard `git pull`.
    - name: Limit 'git pull' to only use fast-forward merges
      community.general.git_config:
        name: pull.ff
        value: only
        scope: global

    - name: User configuration name
      community.general.git_config:
        name: user.name
        value: "{{ git_username }}"
        scope: global

    - name: User configuration email
      community.general.git_config:
        name: user.email
        value: "{{ git_email }}"
        scope: global

    # git diff tool.
    # https://stackoverflow.com/a/34119867
    - name: Set git diff tool to use meld
      community.general.git_config:
        name: diff.tool
        value: meld
        scope: global

    - name: Disable git from prompting to use meld or not
      community.general.git_config:
        name: difftool.prompt
        value: false
        scope: global

    - name: Set meld command
      community.general.git_config:
        name: difftool.meld.cmd
        value: 'meld "$LOCAL" "$REMOTE"'
        scope: global

    # git merge tool.
    # https://stackoverflow.com/a/34119867
    - name: Set git merge tool to use meld
      community.general.git_config:
        name: merge.tool
        value: meld
        scope: global

    - name: Set meld command
      community.general.git_config:
        name: mergetool.meld.cmd
        # Choose one of these 2 lines (not both!) explained in link above.
        value: 'meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"'
        # value: 'meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"'
        scope: global

    # ##### oh-my-bash.
    # # This is not idempotent, but using the native installation script I doubt
    # # it can be made idempotent.
    # - name: Download oh-my-bash installer
    #   get_url:
    #     url: https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh
    #     dest: /tmp/ohmybash-installer.sh
    #     mode: "0755"
    #   tags: non-idempotent

    # - name: Execute the oh-my-bash installer
    #   ansible.builtin.shell:
    #     cmd: /tmp/ohmybash-installer.sh --unattended
    #     creates: "{{ home_dir }}/.bashrc.pre-oh-my-bash"
    #   tags: non-idempotent

    # - name: Remove the oh-my-bash installer
    #   file:
    #     path: /tmp/ohmybash-installer.sh
    #     state: absent
    #   tags: non-idempotent

    # - name: Configure oh-my-bash theme to use garo
    #   lineinfile:
    #     dest: "{{ home_dir }}/.bashrc"
    #     regexp: "^OSH_THEME.*"
    #     line: 'OSH_THEME="garo"'
    #     state: present
    #   tags: non-idempotent

    # TODO: check if sourcing works.
    # - name: Source .bashrc.
    #   become: no
    #   shell: ". /home/{{ user }}/.bashrc"
    # end: oh-my-bash.

    ##### oh-my-zsh.
    # This is not idempotent, but using the native installation script I doubt
    # it can be made idempotent.
    - name: Download oh-my-zsh installer
      get_url:
        url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        dest: /tmp/ohmyzsh-installer.sh
        mode: "0755"
      tags: zsh, non-idempotent

    - name: Execute the oh-my-zsh installer
      command:
        cmd: /tmp/ohmyzsh-installer.sh --unattended
        creates: "{{ home_dir }}/.zsh.pre-oh-my-zsh"
      tags: zsh, non-idempotent

    - name: Remove the oh-my-zsh installer
      file:
        path: /tmp/ohmyzsh-installer.sh
        state: absent
      tags: zsh, non-idempotent

    - name: Configure oh-my-zsh theme to use eastwood theme
      lineinfile:
        dest: "{{ home_dir }}/.zshrc"
        regexp: "^ZSH_THEME.*"
        line: 'ZSH_THEME="eastwood"'
        state: present

    # For some reason, zsh is not set as the default shell. The command
    # `chsh -s $(which zsh)` requires sudo, but using become in Ansible sets
    # the shell for root. Therefore use the user module.
    - name: Make zsh the default shell for the current user
      become: true
      user:
        name: "{{ user }}"
        shell: /usr/bin/zsh
    # end: oh-my-zsh.

    # https://askubuntu.com/a/1193510
    - name: Set icons for favorite bar
      community.general.dconf:
        key: "/org/gnome/shell/favorite-apps"
        value: "['org.gnome.Nautilus.desktop', 'google-chrome.desktop', 'code.desktop', 'virt-manager.desktop']"
